{% extends 'base.twig' %}

{% block main %}

    <div class="container-lg border-bottom mb-3 pb-3 px-4 d-flex flex-row justify-content-between align-items-center gap-2">
        <ol class="breadcrumb mb-0">
            <li class="breadcrumb-item">
                <i class="bi-house me-1"></i>
                <a href="/">
                    Home
                </a>
            </li>
            {% for parent in parents %}
                <li class="breadcrumb-item">
                    <i class="bi-folder me-1"></i>
                    <a href="/folders/{{ parent.id }}">
                        {{ parent.name }}
                    </a>
                </li>
            {% endfor %}
        </ol>
    </div>

    <div class="container-lg px-4 sticky-top">
        <div class="d-flex flex-row justify-content-between align-items-start">
            <h1 class="h2 mb-3">
                {{ file.title }}
            </h1>
            <div class="d-flex flex-row gap-4">
                <div>Words : <span id="wordCount"></span></div>
                <div id="save" class="text-end" style="cursor: pointer">
                    Last saved: <span id="lastSaved">none</span>
                </div>
            </div>
        </div>
        <div class="btn-toolbar mb-3">
            <div class="btn-group me-4 d-none d-md-block">
                <button type="button" id="h1Button" class="btn btn-outline-secondary">
                    <i class="bi-type-h1"></i>
                </button>
                <button type="button" id="h2Button" class="btn btn-outline-secondary">
                    <i class="bi-type-h2"></i>
                </button>
                <button type="button" id="h3Button" class="btn btn-outline-secondary">
                    <i class="bi-type-h3"></i>
                </button>
                <button type="button" id="paragraphButton" class="btn btn-outline-secondary">
                    <i class="bi-text-paragraph"></i>
                </button>
            </div>
            <div class="btn-group me-4">
                <button type="button" id="boldButton" class="btn btn-outline-secondary">
                    <i class="bi-type-bold"></i>
                </button>
                <button type="button" id="italicButton" class="btn btn-outline-secondary">
                    <i class="bi-type-italic"></i>
                </button>
                <button type="button" id="underlineButton" class="btn btn-outline-secondary">
                    <i class="bi-type-underline"></i>
                </button>
                <button type="button" id="strikeButton" class="btn btn-outline-secondary">
                    <i class="bi-type-strikethrough"></i>
                </button>
            </div>
            <div class="btn-group me-4 d-none d-md-block">
                <button type="button" id="alignLeftButton" class="btn btn-outline-secondary">
                    <i class="bi-text-left"></i>
                </button>
                <button type="button" id="alignCenterButton" class="btn btn-outline-secondary">
                    <i class="bi-text-center"></i>
                </button>
                <button type="button" id="alignRightButton" class="btn btn-outline-secondary">
                    <i class="bi-text-right"></i>
                </button>
                <button type="button" id="alignJustifyButton" class="btn btn-outline-secondary">
                    <i class="bi-justify"></i>
                </button>
            </div>
            <div class="btn-group me-4 d-none d-md-block">
                <button type="button" id="bulletListButton" class="btn btn-outline-secondary">
                    <i class="bi-list-ul"></i>
                </button>
                <button type="button" id="orderedListButton" class="btn btn-outline-secondary">
                    <i class="bi-list-ol"></i>
                </button>
            </div>
            <button type="button" id="hrButton" class="btn btn-outline-secondary">
                <i class="bi-hr"></i>
            </button>
        </div>
    </div>

    <div class="container-lg px-4">
        <div id="editor"></div>
    </div>

{% endblock %}

{% block scripts %}

    <script type="module">
        import {Editor} from 'https://esm.sh/@tiptap/core';
        import StarterKit from 'https://esm.sh/@tiptap/starter-kit';
        import TextAlign from 'https://esm.sh/@tiptap/extension-text-align';
        import Typography from 'https://esm.sh/@tiptap/extension-typography';
        import CharacterCount from 'https://esm.sh/@tiptap/extension-character-count';
        import {format} from "https://cdn.jsdelivr.net/npm/date-fns/format.mjs";

        const editor = new Editor({
            element: document.getElementById('editor'),
            extensions: [
                StarterKit,
                TextAlign,
                Typography,
                CharacterCount,
            ],
            content: {{ file.content ? file.content|raw : '{}' }},
        });

        const activeClass = 'btn-secondary';
        const inactiveClass = 'btn-outline-secondary';

        const h1Button = document.getElementById('h1Button');
        const h2Button = document.getElementById('h2Button');
        const h3Button = document.getElementById('h3Button');
        const paragraphButton = document.getElementById('paragraphButton');
        const boldButton = document.getElementById('boldButton');
        const italicButton = document.getElementById('italicButton');
        const underlineButton = document.getElementById('underlineButton');
        const strikeButton = document.getElementById('strikeButton');
        const alignLeftButton = document.getElementById('alignLeftButton');
        const alignCenterButton = document.getElementById('alignCenterButton');
        const alignRightButton = document.getElementById('alignRightButton');
        const alignJustifyButton = document.getElementById('alignJustifyButton');
        const bulletListButton = document.getElementById('bulletListButton');
        const orderedListButton = document.getElementById('orderedListButton');
        const hrButton = document.getElementById('hrButton');

        const setBtnState = (btn, active) => {
            if (active) {
                btn.classList.replace(inactiveClass, activeClass);
            } else {
                btn.classList.replace(activeClass, inactiveClass);
            }
        };

        h1Button.addEventListener('click', () => editor.chain().focus().toggleHeading({level: 1}).run());
        h2Button.addEventListener('click', () => editor.chain().focus().toggleHeading({level: 2}).run());
        h3Button.addEventListener('click', () => editor.chain().focus().toggleHeading({level: 3}).run());
        paragraphButton.addEventListener('click', () => editor.chain().focus().setParagraph().run());
        boldButton.addEventListener('click', () => editor.chain().focus().toggleBold().run());
        italicButton.addEventListener('click', () => editor.chain().focus().toggleItalic().run());
        underlineButton.addEventListener('click', () => editor.chain().focus().toggleUnderline().run());
        strikeButton.addEventListener('click', () => editor.chain().focus().toggleStrike().run());
        alignLeftButton.addEventListener('click', () => editor.chain().focus().setTextAlign('left').run());
        alignCenterButton.addEventListener('click', () => editor.chain().focus().setTextAlign('center').run());
        alignRightButton.addEventListener('click', () => editor.chain().focus().setTextAlign('right').run());
        alignJustifyButton.addEventListener('click', () => editor.chain().focus().setTextAlign('justify').run());
        bulletListButton.addEventListener('click', () => editor.chain().focus().toggleBulletList().run());
        orderedListButton.addEventListener('click', () => editor.chain().focus().toggleOrderedList().run());
        hrButton.addEventListener('click', () => editor.chain().focus().setHorizontalRule().run());

        editor.on('transaction', () => {
            setBtnState(h1Button, editor.isActive('heading', {level: 1}));
            setBtnState(h2Button, editor.isActive('heading', {level: 2}));
            setBtnState(h3Button, editor.isActive('heading', {level: 3}));
            setBtnState(paragraphButton, editor.isActive('paragraph'));
            setBtnState(boldButton, editor.isActive('bold'));
            setBtnState(italicButton, editor.isActive('italic'));
            setBtnState(underlineButton, editor.isActive('underline'));
            setBtnState(strikeButton, editor.isActive('strike'));
            setBtnState(alignLeftButton, editor.isActive({textAlign: 'left'}));
            setBtnState(alignCenterButton, editor.isActive({textAlign: 'center'}));
            setBtnState(alignRightButton, editor.isActive({textAlign: 'right'}));
            setBtnState(alignJustifyButton, editor.isActive({textAlign: 'justify'}));
            setBtnState(bulletListButton, editor.isActive('bulletList'));
            setBtnState(orderedListButton, editor.isActive('orderedList'));
            document.getElementById('wordCount').innerText = editor.storage.characterCount.words();
        });

        editor.commands.focus();

        const lastSaved = document.getElementById('lastSaved');

        const save = () => {
            lastSaved.innerText = "Saving...";

            const formData = new FormData();
            formData.append('id', '{{ file.id }}');
            formData.append('content', JSON.stringify(editor.getJSON()));

            fetch('/files/content', {
                method: 'POST',
                body: formData,
            }).then((response) => {
                if (!response.ok) {
                    lastSaved.innerText = 'Error';
                } else {
                    lastSaved.innerText = format(Date.now(), 'HH:mm');
                }
            }).catch(() => {
                lastSaved.innerText = 'Error';
            });
        }

        document.getElementById('save').addEventListener('click', save);
        setInterval(save, 60 * 1000);

        const stickyHeader = document.querySelector('.sticky-top');
        let lastScroll = 0;
        const classNames = ['bg-white', 'shadow-sm', 'py-2'];

        window.addEventListener('scroll', () => {
            const currentScroll = window.pageYOffset;
            const headerTop = stickyHeader.getBoundingClientRect().top;

            if (headerTop <= 0) {
                stickyHeader.classList.add(...classNames);
            } else {
                stickyHeader.classList.remove(...classNames);
            }

            lastScroll = currentScroll;
        });
    </script>
{% endblock %}
